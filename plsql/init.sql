
WHENEVER SQLERROR EXIT SQL.SQLCODE;

CONNECT system/oracle123@XE

BEGIN
  EXECUTE IMMEDIATE 'CREATE USER app_user IDENTIFIED BY app123 DEFAULT TABLESPACE users QUOTA UNLIMITED ON users';
  EXECUTE IMMEDIATE 'GRANT CONNECT, RESOURCE TO app_user';
  EXECUTE IMMEDIATE 'GRANT CREATE PROCEDURE, CREATE TABLE TO app_user';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -01920 THEN
      RAISE;
    END IF;
END;
/


CONNECT app_user/app123@XE

-- Tabla autores
CREATE TABLE authors (
  author_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL
);

-- Tabla libros
CREATE TABLE books (
  book_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR2(150) NOT NULL,
  publication_date DATE,
  isbn VARCHAR2(20),
  pages NUMBER,
  author_id NUMBER NOT NULL,
  CONSTRAINT fk_author FOREIGN KEY (author_id) REFERENCES authors(author_id)
);

--------------------------------------------------------------------------------
-- PROCEDURES FOR AUTHORS
--------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_create_author (
  p_name IN VARCHAR2,
  p_author_id OUT NUMBER
) AS
BEGIN
  INSERT INTO authors(name) VALUES (p_name)
  RETURNING author_id INTO p_author_id;
END;
/

CREATE OR REPLACE PROCEDURE sp_update_author (
  p_author_id IN NUMBER,
  p_name IN VARCHAR2
) AS
BEGIN
  UPDATE authors SET name = p_name WHERE author_id = p_author_id;
END;
/

CREATE OR REPLACE PROCEDURE sp_delete_author (
  p_author_id IN NUMBER
) AS
BEGIN
  DELETE FROM authors WHERE author_id = p_author_id;
END;
/

--------------------------------------------------------------------------------
-- PROCEDURES FOR BOOKS
--------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE sp_create_book (
  p_title IN VARCHAR2,
  p_publication_date IN DATE,
  p_isbn IN VARCHAR2,
  p_pages IN NUMBER,
  p_author_id IN NUMBER,
  p_book_id OUT NUMBER
) AS
BEGIN
  INSERT INTO books(title, publication_date, isbn, pages, author_id)
  VALUES (p_title, p_publication_date, p_isbn, p_pages, p_author_id)
  RETURNING book_id INTO p_book_id;
END;
/

CREATE OR REPLACE PROCEDURE sp_update_book (
  p_book_id IN NUMBER,
  p_title IN VARCHAR2,
  p_publication_date IN DATE,
  p_isbn IN VARCHAR2,
  p_pages IN NUMBER,
  p_author_id IN NUMBER
) AS
BEGIN
  UPDATE books
  SET title = p_title,
      publication_date = p_publication_date,
      isbn = p_isbn,
      pages = p_pages,
      author_id = p_author_id
  WHERE book_id = p_book_id;
END;
/

CREATE OR REPLACE PROCEDURE sp_delete_book (
  p_book_id IN NUMBER
) AS
BEGIN
  DELETE FROM books WHERE book_id = p_book_id;
END;
/
